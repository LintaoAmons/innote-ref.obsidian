'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class MyPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.lineWithRefPattern = /(.*)(==\d+-REF==).*/;
        this.mdView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        this.editor = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView).editor;
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.addCommand({
                id: "insert-or-jump-to-next",
                name: "Insert or Jump to next ref",
                checkCallback: (checking) => {
                    if (checking)
                        return !!this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                    this.insertOrJump();
                },
            });
            this.addCommand({
                id: "jump to preview",
                name: "Jump to previews",
                checkCallback: (checking) => {
                    if (checking)
                        return !!this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                    this.jumpPreview();
                }
            });
        });
    }
    insertOrJump() {
        if (this.hasRefInCurrentLine()) {
            this.jumpToNextRef();
        }
        else {
            this.insertInPlace();
        }
    }
    insertInPlace() {
        const currentPosition = this.editor.getCursor();
        const newLine = this.generateNewLine();
        this.replaceCurrentLine(newLine);
        this.editor.setCursor(currentPosition);
    }
    replaceCurrentLine(newLine) {
        const cursorPosition = this.editor.getCursor();
        const lineText = this.editor.getLine(cursorPosition.line);
        this.editor.replaceRange(newLine, { line: cursorPosition.line, ch: 0 }, { line: cursorPosition.line, ch: lineText.length });
    }
    generateNewLine() {
        const { linePart1, linePart2 } = this.splitLineByCursor();
        const currentNumber = this.countCurrentNumber();
        if (linePart1.length === 0 && linePart2.length === 0) {
            return `==${currentNumber}-REF==`;
        }
        else if (linePart1.length === 0 && linePart2.length > 0) {
            return `==${currentNumber}-REF== ${linePart2}`;
        }
        else if (linePart1.length > 0 && linePart2.length <= 1) {
            return `${linePart1}${linePart2} ==${currentNumber}-REF==`;
        }
        else {
            return `${linePart1} ==${currentNumber}-REF== ${linePart2}`;
        }
    }
    jumpToNextRef() {
        const currentRef = this.getCurrentLineRef();
        const nextLineNumber = this.editor.getCursor().line + 1;
        for (let i = nextLineNumber; i < this.editor.lineCount(); i++) {
            const theLine = this.editor.getLine(i);
            if (theLine.match(currentRef)) {
                const linePartBeforeRef = theLine.match(this.lineWithRefPattern)[1];
                this.editor.setCursor({ line: i, ch: linePartBeforeRef.length + 1 });
                return;
            }
        }
        return;
    }
    jumpPreview() {
        const currentRef = this.getCurrentLineRef();
        const prevLineNumber = this.editor.getCursor().line - 1;
        for (let i = prevLineNumber; i > 0; i--) {
            const theLine = this.editor.getLine(i);
            if (theLine.match(currentRef)) {
                const linePartBeforeRef = theLine.match(this.lineWithRefPattern)[1];
                this.editor.setCursor({ line: i, ch: linePartBeforeRef.length + 1 });
                return;
            }
        }
        return;
    }
    getCurrentLineRef() {
        const lineText = this.getCurrentLine();
        const match = lineText.match(this.lineWithRefPattern);
        return match[2];
    }
    splitLineByCursor() {
        const cursorPosition = this.editor.getCursor();
        const lineText = this.editor.getLine(cursorPosition.line);
        const linePart1 = lineText.substring(0, cursorPosition.ch);
        const linePart2 = lineText.substring(cursorPosition.ch);
        return { linePart1, linePart2 };
    }
    countCurrentNumber() {
        const markdownText = this.mdView.data;
        const match = markdownText.match(/==\d+-REF==/g);
        if (match === null) {
            return 1;
        }
        const numbers = match.map(it => Number(it.substring(2, 3)));
        return Math.max(...numbers);
    }
    hasRefInCurrentLine() {
        const lineText = this.getCurrentLine();
        const match = lineText.match(this.lineWithRefPattern);
        return match !== null;
    }
    getCurrentLine() {
        const cursorPosition = this.editor.getCursor(); // 光标现在的位置
        return this.editor.getLine(cursorPosition.line); // 这一行的文本
    }
}

module.exports = MyPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
