'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class EditorUtils {
    constructor(editor) {
        this.editor = editor;
    }
    getLineContentUnderCursor() {
        const cursorPosition = this.editor.getCursor();
        return this.editor.getLine(cursorPosition.line);
    }
    replaceCurrentLine(newLine) {
        const cursorPosition = this.editor.getCursor();
        const lineText = this.editor.getLine(cursorPosition.line);
        this.editor.replaceRange(newLine, { line: cursorPosition.line, ch: 0 }, { line: cursorPosition.line, ch: lineText.length });
    }
}

class RefUtil {
    static generateRef(refNumber) {
        return `==${refNumber}-REF==`;
    }
}
RefUtil.lineWithRefPattern = /(.*)(==\d+-REF==).*/;

class MyPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.mdView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        this.editor = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView).editor;
        this.editorUtils = new EditorUtils(this.editor);
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.addCommand({
                id: "insert-or-jump-to-next",
                name: "Insert or Jump",
                checkCallback: (checking) => {
                    if (checking)
                        return !!this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                    this.insertAtLineEndOrJump();
                },
            });
            this.addCommand({
                id: "jump to preview",
                name: "Jump to previews",
                checkCallback: (checking) => {
                    if (checking)
                        return !!this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                    this.jumpPreview();
                },
            });
            this.addCommand({
                id: "insert in place",
                name: "Insert in place or Jump",
                checkCallback: (checking) => {
                    if (checking)
                        return !!this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                    this.insertInPlaceOrJump();
                },
            });
        });
    }
    insertInPlaceOrJump() {
        if (this.hasRefInCurrentLine()) {
            this.jumpToNextRef();
        }
        else {
            this.insertInPlace();
        }
    }
    insertAtLineEndOrJump() {
        if (this.hasRefInCurrentLine()) {
            this.jumpToNextRef();
        }
        else {
            this.insertAtLineEnd();
        }
    }
    insertAtLineEnd() {
        const currentPosition = this.editor.getCursor();
        const newLine = this.generateNewLineAtLineEnd();
        this.editorUtils.replaceCurrentLine(newLine);
        this.editor.setCursor(currentPosition);
    }
    insertInPlace() {
        const currentPosition = this.editor.getCursor();
        const newLine = this.generateNewLineInPosition();
        this.editorUtils.replaceCurrentLine(newLine);
        this.editor.setCursor(currentPosition);
    }
    generateNewLineInPosition() {
        const { linePart1, linePart2 } = this.splitLineByCursor();
        const currentNumber = this.countCurrentNumber();
        const refText = RefUtil.generateRef(currentNumber);
        if (linePart1.length === 0 && linePart2.length === 0) {
            return refText;
        }
        else if (linePart1.length === 0 && linePart2.length > 0) {
            return `${refText} ${linePart2}`;
        }
        else if (linePart1.length > 0 && linePart2.length <= 1) {
            return `${linePart1}${linePart2} ${refText}`;
        }
        else {
            return `${linePart1} ${refText} ${linePart2}`;
        }
    }
    generateNewLineAtLineEnd() {
        const lineText = this.editorUtils.getLineContentUnderCursor();
        const currentNumber = this.countCurrentNumber();
        const refText = RefUtil.generateRef(currentNumber);
        if (lineText.length === 0) {
            return refText;
        }
        else {
            return `${lineText} ${refText}`;
        }
    }
    jumpToNextRef() {
        const currentRef = this.getCurrentLineRef();
        const nextLineNumber = this.editor.getCursor().line + 1;
        for (let i = nextLineNumber; i < this.editor.lineCount(); i++) {
            const theLine = this.editor.getLine(i);
            if (theLine.match(currentRef)) {
                const linePartBeforeRef = theLine.match(RefUtil.lineWithRefPattern)[1];
                this.editor.setCursor({ line: i, ch: linePartBeforeRef.length + 1 });
                return;
            }
        }
        return;
    }
    jumpPreview() {
        const currentRef = this.getCurrentLineRef();
        const prevLineNumber = this.editor.getCursor().line - 1;
        for (let i = prevLineNumber; i > 0; i--) {
            const theLine = this.editor.getLine(i);
            if (theLine.match(currentRef)) {
                const linePartBeforeRef = theLine.match(RefUtil.lineWithRefPattern)[1];
                this.editor.setCursor({ line: i, ch: linePartBeforeRef.length + 1 });
                return;
            }
        }
        return;
    }
    getCurrentLineRef() {
        const lineText = this.editorUtils.getLineContentUnderCursor();
        const match = lineText.match(RefUtil.lineWithRefPattern);
        return match[2];
    }
    splitLineByCursor() {
        const cursorPosition = this.editor.getCursor();
        const lineText = this.editor.getLine(cursorPosition.line);
        const linePart1 = lineText.substring(0, cursorPosition.ch);
        const linePart2 = lineText.substring(cursorPosition.ch);
        return { linePart1, linePart2 };
    }
    countCurrentNumber() {
        const markdownText = this.mdView.data;
        const match = markdownText.match(/==\d+-REF==/g);
        if (match === null) {
            return 1;
        }
        const numbers = match.map((it) => Number(it.substring(2, 3)));
        return Math.max(...numbers);
    }
    hasRefInCurrentLine() {
        const lineText = this.editorUtils.getLineContentUnderCursor();
        const match = lineText.match(RefUtil.lineWithRefPattern);
        return match !== null;
    }
}

module.exports = MyPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
